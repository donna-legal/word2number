// Code generated by go-bindata.
// sources:
// resources/en.yml
// resources/sv.yml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesEnYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xdb\x6e\xdb\x30\x0c\x86\xef\xfb\x14\x04\x76\xbd\x42\x59\x8f\xf1\xed\x9e\x44\x89\xe8\x59\x9b\x22\x05\x3a\xc4\xeb\x9e\x7e\x70\xe2\x62\xe3\x41\x69\xd0\x5c\x86\x1f\x7f\x92\xbf\x29\x62\x1c\xee\x00\x1c\xee\xfd\xc1\x86\x32\xc0\x1d\x00\xc0\x57\x98\x53\x76\x03\x1c\x93\x8f\xf5\xfc\x0f\xc0\x8c\xf6\xd7\x00\xa3\x0d\x05\x09\xe3\x52\x08\x36\x97\x0f\x28\x6c\x39\xe9\xcc\x17\xf8\x9e\x5a\x70\xb0\x43\xb0\xef\x7d\x40\x39\x06\x5f\x2b\xe6\x01\x52\x44\xb0\xd1\xc1\xe8\x4f\x08\x15\x63\x9d\xca\x3d\xfc\x97\x66\x43\x49\xf0\xb3\x95\x7a\x11\x18\x7d\x08\x98\xd7\xa2\x75\x4e\x30\xb5\xe8\x32\xba\x55\x63\xac\x6f\x50\xa7\xd4\x8a\x8d\xee\x9e\x34\x68\xa3\x23\xed\xd5\xdc\x70\xa9\xb3\x4f\x2d\x56\xcc\x65\x20\xf4\x1f\xcc\x69\xc5\x63\x3b\xec\x96\x46\x0d\x01\xd2\x74\x3d\x1c\x91\xc5\x37\x24\x5e\x67\x2e\xff\x8d\xc6\xa7\x8c\x5c\xe1\x81\x10\x63\x6a\x99\x01\x8f\x14\xf0\x27\xae\xf0\x44\x80\xe2\x7f\xb3\xf8\x33\x8d\xe3\x09\x23\x23\x5e\xe8\x47\xf7\x3f\xa6\xca\x88\x57\x42\x44\x2f\x8c\xd8\xd2\x41\x45\x89\x0d\x75\x12\x83\xd2\xc6\x86\xbb\x89\x41\x0c\xbb\xe1\x8e\xfa\x5c\x51\x2a\x49\x57\x35\x8a\x5b\x3b\x6a\x90\xb0\x57\x83\x14\x8f\x35\x4c\x31\x5a\xa1\xa4\xd9\x1a\xb5\xe5\x66\xc5\xfa\xc6\xb7\xcf\x48\xb3\x38\xf3\x60\x98\x55\x12\x79\x34\xc2\x27\x8e\x3c\x19\xe1\x12\x47\x9e\x8d\xe2\x11\x87\x5e\x8c\x74\x88\x33\xaf\x46\xfa\xc3\x99\xed\xc2\x1c\x5a\xa8\xfe\x18\xbc\xb8\x03\xeb\x75\x11\x2b\xca\xed\xba\x5c\x1c\x89\x51\xee\xe0\x43\xf0\x49\x2e\xfc\xf9\x47\xc8\xdd\x35\x92\xc3\x35\x7f\x40\x5f\x12\x9c\x3f\x79\x27\x26\xdc\x63\xe4\x4f\xf8\x7d\xbc\x7f\xbe\xd8\x5d\x40\xed\xea\x2f\xc9\xe5\xd3\xd9\xe7\x6b\xaf\xbf\xfe\x1b\x93\x65\xed\x1b\xb3\xd7\xef\xaa\x94\x37\x3a\xd7\x9b\x92\xaf\x80\xa6\xd8\x23\x15\x4d\x75\x5f\x54\xcd\x2e\xab\xa9\x76\xd6\xab\x27\xdc\xc5\x3b\xda\xbd\x85\xbc\xa2\xdf\x4f\xe9\xd7\x58\x72\xfe\x06\x00\x00\xff\xff\xba\xaa\xb0\xbb\xcf\x08\x00\x00")

func resourcesEnYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEnYml,
		"resources/en.yml",
	)
}

func resourcesEnYml() (*asset, error) {
	bytes, err := resourcesEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/en.yml", size: 2255, mode: os.FileMode(420), modTime: time.Unix(1535027910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSvYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcd\x71\x1b\x31\x0c\x85\xef\xae\x02\x33\x39\xc7\x43\xf9\x3f\x7b\x4d\x25\x94\x08\x45\x5c\x73\x09\x0f\x09\xae\xe3\x82\xdc\x42\x1a\x50\x63\x99\x95\x65\x27\x04\x30\x72\x14\x1f\xfd\x3e\x3c\x82\x8f\x58\xa8\xce\xc3\x05\x40\xc0\x4d\x9c\x7c\xaa\x03\x5c\x00\x00\x7c\x85\x67\x2a\x61\x80\x47\x9a\x26\x7f\xf8\x0f\xc0\x33\xfa\xc7\x01\xb6\x3e\x55\xec\x99\x42\x99\xca\x27\x10\xb6\x42\x9f\x20\x81\x52\xf2\xb6\xcf\x17\xf8\x4e\x2d\x05\x58\x23\xf8\xf7\x56\xa1\x3e\xa5\xc8\x8c\x65\x00\xca\x08\x3e\x07\xd8\xc6\x19\x81\x31\xf3\xae\x5e\xc2\x5f\x65\x3e\x55\x82\xb1\x55\x7e\x33\xd8\xc6\x94\xb0\x1c\x4f\xe5\x67\x82\x5d\xcb\xa1\x60\x38\x7a\x6c\xf9\x05\x78\x47\xad\xfa\x1c\x2e\xbb\x0e\x69\xb3\xeb\xda\xe3\xd2\x70\x39\x67\x43\x2d\x33\x96\x3a\x74\x74\xa6\x94\x8e\x78\x6e\xd3\x7a\x69\xd4\xf5\x99\x30\x0b\x7d\xd5\xeb\xf9\xa4\xcc\xf3\xfe\x55\x00\x57\x3d\x50\x50\xe8\xd7\x9d\xbe\x7d\x29\x5e\x00\x37\x3d\x80\x93\xd0\x6f\x3b\xbd\xe2\x4f\xa1\xdf\xf5\xfa\xd8\x84\x7e\xdf\xe9\xfb\x57\x66\xd9\xc1\x43\x9f\x61\x24\xa1\x7f\xeb\xaf\xa8\xf4\x95\xc8\x38\xcd\xf2\x84\x95\x88\x91\xd2\x2c\x09\x95\x23\x33\xa9\xc7\x10\x61\x8e\x54\x0c\x48\x05\x6a\x30\x2a\x54\x83\x51\xc1\x5a\x1d\xf5\xe9\x7a\xab\x1f\x19\xaf\x65\x23\x22\x1e\xdb\x0f\x19\xf2\x95\xd3\x01\xa9\x97\xb8\x76\x72\xda\x34\x73\xe3\x54\x3e\x8a\xb9\x75\x2a\x1f\xc5\xdc\x39\x9d\x8f\x82\xee\x9d\x9a\x3e\xc5\x3c\x38\x15\x90\x1e\xc1\x85\x99\x5a\xe2\xf8\x94\xa2\xfa\xec\x0f\xcb\x44\xcd\x9c\x13\x89\xb5\xaa\xbf\x6e\x27\xa0\x29\xa6\x51\xbf\x8e\x3b\xfc\x29\xd0\x97\x60\x93\x12\x5e\x9f\x70\xfd\xc0\x43\x9c\x63\x50\x57\xdb\xff\x52\x1b\xe5\xfd\x62\x7f\x02\xf1\xeb\x84\xd6\x7a\x5f\x8a\x8d\x63\xff\xb1\x7a\x83\x59\x2d\xcb\xb3\x8a\xeb\x7f\x57\x73\xa4\x1c\x50\xae\xf2\xd5\x99\xe5\x1f\xbf\x6c\x67\x1b\xbc\x0d\x94\xd5\x81\xb3\x39\xe3\x28\x63\xfa\x4c\x43\x9b\xb3\x0c\xad\x51\x65\xb4\x4d\x4f\xd0\xa6\xf5\xc2\xff\x0e\x00\x00\xff\xff\x26\x65\x61\xff\x97\x08\x00\x00")

func resourcesSvYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSvYml,
		"resources/sv.yml",
	)
}

func resourcesSvYml() (*asset, error) {
	bytes, err := resourcesSvYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/sv.yml", size: 2199, mode: os.FileMode(420), modTime: time.Unix(1535032835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/en.yml": resourcesEnYml,
	"resources/sv.yml": resourcesSvYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{resourcesEnYml, map[string]*bintree{}},
		"sv.yml": &bintree{resourcesSvYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

