// Code generated by go-bindata.
// sources:
// resources/en.yml
// resources/sv.yml
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesEnYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\xcb\xb2\xd3\x30\x0c\x86\xf7\xe7\x29\x34\xc3\x9a\x33\x2e\xe7\xda\x6c\x79\x12\xb7\x56\x88\xc1\xb5\x33\xbe\xb4\x1c\x9e\x9e\x49\x1b\x06\x74\x71\xdb\x21\xcb\xe8\xd3\x2f\xe9\x8f\xec\x60\x1c\x1e\x00\x1c\xee\xfd\xc1\x86\x32\xc0\x03\x00\xc0\x67\x38\xa5\xec\x06\x98\x93\x8f\xf5\xfc\x06\xe0\x84\xf6\xc7\x00\xa3\x0d\x05\x09\xe3\x52\x08\x36\x97\x1b\x14\xb6\x9c\x74\xe6\x13\x7c\x4d\x2d\x38\xd8\x21\xd8\x3f\x7d\x40\x99\x83\xaf\x15\xf3\x00\x29\x22\xd8\xe8\x60\xf4\x47\x84\x8a\xb1\x4e\xe5\x11\xfe\x49\xb3\xa1\x24\xf8\xde\x4a\xbd\x08\x8c\x3e\x04\xcc\x6b\xd1\x7a\x4a\x30\xb5\xe8\x32\xba\x55\x63\xac\x1f\x50\xa7\xd4\x8a\x8d\xee\x91\x34\x68\xa3\x23\xed\xd5\xdc\x70\xa9\xb3\x4f\x2d\x56\xcc\x65\x20\xf4\x2f\xcc\x69\xc5\x63\x3b\xec\x96\x46\x0d\x01\xd2\x74\x3d\x1c\x91\xc5\x37\x24\x5e\x4f\x5c\xfe\x0b\x8d\x4f\x19\xb9\xc2\x13\x21\xc6\xd4\x32\x03\x9e\x29\xe0\x8f\x5c\xe1\x85\x00\xc5\xff\x64\xf1\x57\x1a\xc7\x23\x46\x46\xbc\xd1\x8f\xee\xbf\x4d\x95\x11\xef\x84\x88\x5e\x18\xb1\xa5\x83\x8a\x12\x1b\xea\x24\x06\xa5\x8d\x0d\x77\x13\x83\x18\x76\xc3\x1d\xf5\xb9\xa2\x54\x92\xae\x6a\x14\xb7\x76\xd4\x20\x61\xaf\x06\x29\x1e\x6b\x98\x62\xb4\x42\x49\xb3\x35\x6a\xcb\xcd\x8a\xf5\x83\x6f\x9f\x91\x66\x71\xe6\xc9\x30\xab\x24\xf2\x6c\x84\x4f\x1c\x79\x31\xc2\x25\x8e\xbc\x1a\xc5\x23\x0e\xbd\x19\xe9\x10\x67\xde\x8d\xf4\x87\x33\xdb\x85\x39\xb4\x50\xfd\x1c\xbc\xb8\x07\xd6\xdb\x45\xac\x28\xb7\xeb\x72\xe3\x48\x8c\x72\x07\x1f\x82\x4f\x72\xe1\xcf\x0f\x21\x77\xd7\x48\x0e\xd7\x7c\x83\xbe\x24\xcc\x98\xf7\x18\x2b\x1d\x70\x7d\x79\x63\xc0\x19\x33\xdc\x89\x2d\x33\x8a\xa3\xc8\x3b\x9e\x31\xdf\xcb\x2d\x82\xf7\xc9\xe9\x94\xf3\x47\xef\xc4\x77\xbd\x32\xcc\xdf\x6d\xb0\xbb\x80\xda\xbf\x6e\x49\x2e\xff\x9d\x7d\xfe\xc7\xe9\x77\xde\x9d\xc9\xb2\xf6\x9d\xd9\xeb\x36\x2b\xe5\x8d\xce\xf5\xa6\xe4\x8b\xaf\x29\xf6\x48\x45\x53\x3d\x25\xaa\x66\x97\xd5\x54\x3b\x87\xaa\x27\xdc\xc5\x3b\xda\xbd\x63\x78\x45\xbf\x9f\xd2\xaf\xb1\xe4\xfc\x0e\x00\x00\xff\xff\xd0\xf1\xb7\x4d\xc5\x09\x00\x00")

func resourcesEnYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesEnYml,
		"resources/en.yml",
	)
}

func resourcesEnYml() (*asset, error) {
	bytes, err := resourcesEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/en.yml", size: 2501, mode: os.FileMode(420), modTime: time.Unix(1535037665, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSvYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x95\x4f\x72\x23\x2b\x0c\xc6\xf7\x39\x85\xaa\xde\xfa\xa5\x70\xfe\x4f\x6f\xe7\x24\xd8\xc8\x63\x1c\x1a\xb9\x40\xb4\x27\x07\xca\x15\xe6\x02\xbe\xd8\x54\x3b\x4e\x66\x90\x54\x76\x32\xbd\xec\xef\x27\x21\x7d\x08\xa8\xd3\x70\x05\x10\x70\x15\x47\x9f\xea\x00\x57\x00\x00\xff\xc3\x9e\x4a\x18\xe0\x99\xc6\xd1\x1f\xff\x00\xec\xd1\x3f\x0f\xb0\xf6\xa9\x62\xcf\x14\xca\x54\x2e\x40\xd8\x0a\x5d\x40\x02\xa5\xe4\xed\x3c\xff\xc1\x77\x6a\x29\xc0\x12\xc1\xbf\x97\x0a\x75\x97\x22\x33\x96\x01\x28\x23\xf8\x1c\x60\x1d\x27\x04\xc6\xcc\x9b\x7a\x0d\x7f\x85\xf9\x54\x09\xb6\xad\xf2\x5b\x82\x75\x4c\x09\xcb\x69\x55\xde\x13\x6c\x5a\x0e\x05\xc3\x29\xc7\x9a\x5f\x80\x37\xd4\xaa\xcf\xe1\xba\xab\x90\x56\x9b\xae\x3c\x2e\x0d\xe7\x75\x56\xd4\x32\x63\xa9\x43\x47\x67\x4a\xe9\x84\xe7\x36\x2e\xe7\x42\x5d\xef\x09\xb3\xd0\x17\xbd\x9e\xcf\xca\x3c\x1d\x5e\x05\x70\xd3\x03\x05\x85\x7e\xdb\xe9\xeb\x97\xe2\x05\x70\xd7\x03\x38\x0a\xfd\xbe\xd3\x2b\xfe\x14\xfa\x43\xaf\x6f\x9b\xd0\x1f\x3b\xfd\xf0\xca\x2c\x2b\x78\xea\x3d\x8c\x24\xf4\x6f\x7d\x8b\x4a\x5f\x08\x8f\xd3\x24\x57\x58\x08\x1b\x29\x4d\x92\x50\x3e\x32\x93\xda\x0c\x61\xe6\x96\x8a\x01\x29\x43\x0d\x46\x99\x6a\x30\xca\x58\xab\xa2\xde\x5d\x6f\xd5\x23\xed\xb5\xd2\x08\x8b\xb7\xed\x87\x34\xf9\xc6\x69\x83\xd4\x4e\xdc\x3a\x39\x6d\x9a\xb9\x73\xca\x1f\xc5\xdc\x3b\xe5\x8f\x62\x1e\x9c\xf6\x47\x41\x8f\x4e\x4d\x9f\x62\x9e\x9c\x32\x48\x8f\xe0\xcc\x8c\x2d\x71\xdc\xa5\xa8\x8e\xfd\xf1\x32\x51\x33\xe7\x84\x63\xad\xea\xd3\xed\x04\x34\xc6\xb4\xd5\xbb\xe3\x8e\x9f\x02\x7d\x09\x36\x29\xe1\xe5\x99\xac\x1f\xf8\x0e\xcb\x0a\x33\xf7\x9d\xed\x0a\xcd\x3f\x2f\xb4\xb6\x2b\x34\xce\x17\xac\xdd\x5d\x88\x53\x0c\xca\xb3\xc3\x2f\x75\x55\xbd\xa7\xfd\xe3\xb4\x5f\x26\xb4\xde\x8d\x39\xd8\xe8\xe7\x93\xd1\x67\x3a\xfa\x5c\x70\xfd\xe7\x68\x8e\x94\x03\xca\x37\x62\xf1\xc5\xf0\x8f\x27\xf3\xcb\x09\xde\x26\xd5\xaa\xc0\xd9\x9c\xb1\x94\x31\xd6\x66\x42\x9b\xb3\x12\x5a\x67\x80\xd1\x4e\x7a\x86\x36\x53\xcf\xfc\xef\x00\x00\x00\xff\xff\xc7\x24\x3e\x01\xf0\x08\x00\x00")

func resourcesSvYmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSvYml,
		"resources/sv.yml",
	)
}

func resourcesSvYml() (*asset, error) {
	bytes, err := resourcesSvYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/sv.yml", size: 2288, mode: os.FileMode(420), modTime: time.Unix(1535037829, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/en.yml": resourcesEnYml,
	"resources/sv.yml": resourcesSvYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{resourcesEnYml, map[string]*bintree{}},
		"sv.yml": &bintree{resourcesSvYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

